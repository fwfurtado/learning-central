# scalar Int Float String ID

scalar Duration
scalar DateTime

interface Person {
    id: ID!
    name: String!
    email: String!
}

type Student implements Person {
    id: ID!
    name: String!
    email: String!
}

type Instructor implements Person {
    id: ID!
    name: String!
    email: String!
}

type Course {
    id: ID!
    code: String!
    name: String!
    description: String
    workload: Duration
}

type Class {
    id: ID!
    start: DateTime!
    course: Course!
    instructor: Instructor!
}

type Query {
    instructors(id: ID): [Instructor]!
    courses(id: ID): [Course]!
    classes(id: ID, first: Int, after: String): ClassConnection @connection(for: "Class")
}

input AddInstructor {
    name: String!
    email: String!
}

input StudentInput {
    name: String!
    email: String!
}

input CourseInput {
    code: String!
    name: String!
    description: String
    workload: Duration!
}

input ClassInput {
    startDate: DateTime!
    courseId: ID!
    instructorId: ID!
}

input StudentRegistrationInput {
    classId: ID!
    studentId: ID!
}


type Mutation {
    addInstructor(form: AddInstructor!): Instructor
    addCourse(form: CourseInput!): Course
    addClass(form: ClassInput!): Class
    addStudent(form: StudentInput!): Student
    registerStudent(form: StudentRegistrationInput!): Class
}

type NewStudentRegistered {
    when: DateTime
    student: Student
}

type Subscription {
    listenerNewStudentsIn(classId:ID!): NewStudentRegistered!
}